continue
session
continue
session
continue
session
continue
token.is_valid?
continue
token.is_valid?
token.valid
continue
token.valid
toke.valid
token.valid
!token.used
token.used
token.used?
token.valid?
token
continue
session
continue
session
continue
session[:user_uuid]
session
continue
session
continue
session
continue
session
continue
@url
continue
params["token"]
params
continue
params["token"]
token_uuid
continue
u = User.find_by_lower_email(params["email"])
continue
PasswordResetToken.create!(user: u)
u = User.find_by_lower_email(params["email"])
params
continue
current_user.addresses
curent_user.addresses
current_user
continue
cart
current_user
continue
current_user
Cart.find 18
current_user.active_cart
cart
continue
cart_uuid
continue
session[:cart_uuid] = current_user.active_cart.uuid
continue
session[:cart_uuid] = current_user.active_cart.uuid
session
continue
cart
current_user.active_cart
current_user
cart
continue
session[:previous_url]
continue
@redirect_url
continue
@redirect_url
continue
session[:previous_url]
continue
@redirect_url
continue
@redirect_url
continue
session[:previous_url]
request.referrer
request.referre
@redirect_url
continue
@redirect_url
continue
request.fullpath
request.full_path
request.original_url
request.class
request.keys
request
request.previous_url
request.methods
request
request.previous_url
request
session
request.referrer
continue
session.destroy
session.destroy!
continue
cart
session[:cart_uuid] = Cart.find(14).uuid
cart.merge_into!(user.active_cart)
cart
cart_uuid
user.active_cart
cart
continue
current_user.active_cart
cart_uuid
cart
continue
request.referrer
continue
current_user
cart_uuid
cart
continue
request.referrer
continue
cart
self.cart
self.cart.present?
cart.present?
current_user.active_cart.try(:uuid) !=  cart_uuid
current_user.active_cart.try(:uuid)
continue
current_user.active_cart
current_user
self.cart
Cart.find_by_uuid "b6274977-ec6d-40b6-bef3-49b1a457a036"
Cart.last.uuid
cart_uuid
cart
c
continue
Cart.find_by_uuid cart_uuid
Cart.all
session[:cart_uuid]
cart_uuid
Cart.first.uuid
Cart.last.uuid
Cart.count
Cart.all
Cart.first.uuid
Cart.first
Cart.last.uuid
cart_uuid
current_user
continue
self.cart
cart
current_user.active_cart
continue
Cart.count
self.cart.merge_into!(current_user.active_cart)
self.cart
current_user.active_cart
continue
self
keep
continue
self.cart
self.class.cart
self
self.class
cart
self.cart
session.cart
params
cart
continue
Cart.find_by_uuid  session[:cart_uuid]
cart
session[:cart_uuid] = Cart.last.uuid
cart
current_user
session[:user_uuid] = 'asdfasf'
session[:user_uuid]
current_user
(current_user.active_cart.try(:uuid) !=  cart_uuid) && cart.present?
continue
cart.present?
nil != nil
current_user.active_cart.try(:uuid)
continue
cart.present?
cart.present
cart
cart_uuid
current_user.active_cart.try(:uuid)
continue
puts "hello" if (current_user.active_cart.try(:uuid) !=  cart_uuid) && cart
(current_user.active_cart.try(:uuid) !=  cart_uuid) && cart
cart
current_user.active_cart.try(:uuid) !=  cart_uuid
current_user
continue
Cart.all.map(&:uuid)
cart_uuid
Cart.count
Cart
Cart.last
Cart.where("uuid = ?", "3435cffa-932f-4071-85c1-3a59db367543")
Cart.find_by_uuid "3435cffa-932f-4071-85c1-3a59db367543"
Cart.find_by_uuid session[:cart_uuid]
Cart.find_by_uuid cart_uuid
cart
continue
session
Cart.find_by_uuid cart_uuid
continue
Cart.find_by_uuid cart_uuid
current_cart
current_user
current_user_uuid
cart
continue
session[:cart_uuid]
cart_uuid
current_cart
continue
cart = Cart.find_by_uuid cart_uuid
cart
continue
current_user.active_cart.try(:uuid)
cart_uuid
self.cart
self
self.cart_uuid
self.cart
self
session
cart.call
cart.class
cart.trace
cart
cart_uuid
cart
continue
Cart.find_by_uuid cart_uuid
current_user
cart
current_user.active_cart
current_user.active_cart.try(:uuid)
cart_uuid
cart
continue
